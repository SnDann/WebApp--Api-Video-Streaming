using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.AspNetCore.Http;

namespace fnPostDataStorage
{
    public class Function1
    {
        private readonly ILogger<Function1> _logger;

        public Function1(ILogger<Function1> logger)
        {
            _logger = logger;
        }

        [Function("dataStorage")]
    public async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "post")] HttpRequestData req)
          
        {
            _logger.LogInformation("Processando a imagem no Storage.");

           
                if (req.Headers.TryGetValue("file-type", out var fileTypeHeader))
                {
                    return new BadRequestObjectResult("O cabeçalho 'file-type' é obrigatório.");
                }

                var fileType = fileTypeHeader.ToString();
                var form = req.ReadFormAsync();
                var file = form.Files["file"];

                if (file == null || file.Length == 0)
                {
                    return new BadRequestObjectResult("O arquivo não foi enviado.");
                }

                string connecttionString = Environment.GetEnvironmentVariable("AzureWebJobsStorage");
                string containerName = fileType;
                BlobClient blobClient = new BlobClient(connecttionString, containerName, file.FileName);
                BlobContainerClient containerClient = new BlobContainerClient(connecttionString, containerName);
                
                await containerClient.CreateIfNotExistsAsync();
                await blobClient.SetAccessPolicyAsync(PublicAccessType.BlobContainer);
                
                string blobName = file.FileName;
                var blob = containerClient.GetBlobClient(blobName);

                using (var stream = file.OpenReadStream())
                {
                    await blob.UploadAsync(stream, true);
                }

                _logger.LogInformation($"Arquivo armazenado com sucesso: {file.FileName}");
                
                return new OkObjectResult(new
                {
                    Message = "Arquivo armazenado com sucesso.",
                    BlobUri = blob.Uri
                });
                }
            }
        }